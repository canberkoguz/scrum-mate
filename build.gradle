

buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "gradle.plugin.com.palantir:jacoco-coverage:0.4.0"
    }

}

plugins {
    id 'jacoco'
}


wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

group 'com.elsevier.fca'
version '1.0-SNAPSHOT'


allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "com.palantir.jacoco-full-report"


    dependencyManagement {
        imports { mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES }
    }

    dependencies {
        implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
        testImplementation group: 'junit', name: 'junit'
        testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    }

    test {
        finalizedBy jacocoTestReport

        jacoco {
            destinationFile = file("$buildDir/jacoco/jacoco.exec")
            classDumpDir = file("$buildDir/jacoco/classpathdumps")
        }

        jacocoTestReport {
            dependsOn( subprojects.collect { it.tasks.getByName('jacocoMerge')} )
            reports {
                xml.enabled true
                csv.enabled true
                html.enabled true
                html.destination file("${buildDir}/jacoco-reports")
            }
        }
    }

}


task untar(type: Copy) {
    from tarTree(file('build/jira.tar.gz'))
    into file("${buildDir}")
}

task jacocoMerge( type: JacocoMerge ) {
    dependsOn( subprojects.collect { it.tasks.getByName('test')} )
    executionData = project.fileTree(dir: '.', include:'**/build/jacoco/*.exec')
    destinationFile = file( "${buildDir}/jacoco/jacocoCombined.exec" )
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn( subprojects.collect { it.tasks.getByName('test')} )
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

